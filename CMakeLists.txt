cmake_minimum_required(VERSION 3.0)
project(smoother)

set(CMAKE_CXX_STANDARD 11)

if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE RELEASE CACHE STRING
            "Choose the type of build, options are: None Debug Release." FORCE)
endif (NOT CMAKE_BUILD_TYPE)

option(USE_OMP "use OpenMP" ON)
option(USE_MPI "use MPI" ON)

add_executable(original smoother.cpp)
add_executable(improved main.cc pngimage.cc)

find_package(ZLIB REQUIRED)
if (ZLIB_FOUND)
    if (ZLIB_LIBRARIES)
        target_link_libraries(original ${ZLIB_LIBRARIES})
        target_link_libraries(improved ${ZLIB_LIBRARIES})
    endif()
    if (ZLIB_INCLUDE_DIRS)
        include_directories(${ZLIB_INCLUDE_DIRS})
    endif()
else()
    message(STATUS "zlib could not be found.")
endif()

find_package(PNG REQUIRED)
if (PNG_FOUND)
    if (PNG_DEFINITIONS)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PNG_DEFINITIONS}")
    endif()
    if (PNG_LIBRARIES)
        target_link_libraries(original ${PNG_LIBRARIES})
        target_link_libraries(improved ${PNG_LIBRARIES})
    endif()
    if (PNG_INCLUDE_DIRS)
        include_directories(${PNG_INCLUDE_DIRS})
    endif()
else()
    message(STATUS "libpng could not be found.")
endif()

# check for MPI if turned on
if(USE_MPI)
    find_package(MPI)
    if(MPI_CXX_FOUND)
        include_directories(${MPI_CXX_INCLUDE_PATH})
        set_target_properties(improved PROPERTIES COMPILE_FLAGS "-DMPI_ENABLED")
        if(MPI_CXX_COMPILE_FLAGS)
            set_target_properties(improved PROPERTIES COMPILE_FLAGS "${MPI_CXX_COMPILE_FLAGS}")
        endif()
        if (MPI_CXX_LINK_FLAGS)
            set_target_properties(improved PROPERTIES LINK_FLAGS "${MPI_CXX_LINK_FLAGS}")
        endif()
        if (MPI_CXX_COMPILER)
            set(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
        endif()
        message(STATUS "Configured MPI compilation.")
    else()
        message(STATUS "MPI could not be found.")
    endif()
    include_directories(${MPI_CXX_INCLUDE_PATH})
    target_link_libraries(improved ${MPI_CXX_LIBRARIES})
endif()

if (USE_OMP)
    find_package(OpenMP)
    if(OPENMP_FOUND)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    else()
        message(STATUS "OpenMP could not be found.")
    endif()
endif()
